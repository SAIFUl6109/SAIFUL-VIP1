let antiGaliStatus = true; // Default OFF
let offenseTracker = {}; // Track per-group per-user offenses

const badWords = [
  // ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ì ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶ó‡¶æ‡¶≤‡¶ø
  "‡¶Ü‡¶¨‡¶æ‡¶≤","‡¶ö‡ßÅ‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶ö‡ßã‡¶¶","‡¶ö‡ßã‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶§","‡¶ö‡ßÅ‡¶§‡¶Æ‡¶æ‡¶∞‡¶æ‡¶®‡¶ø","‡¶ö‡ßÅ‡¶¶‡¶æ‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶ö‡ßã‡¶¶‡¶æ‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶ö‡ßÅ‡¶¶‡¶ø‡¶®‡¶ø",
  "‡¶ö‡ßã‡¶¶‡¶®","‡¶ö‡ßã‡¶¶‡¶®‡¶ñ‡ßã‡¶∞","‡¶™‡ßÅ‡¶ü‡¶ï‡¶ø","‡¶ó‡¶æ‡¶®‡ßç‡¶°","‡¶ó‡¶æ‡¶®‡ßç‡¶°‡ßÅ","‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∞‡¶ö‡ßã‡¶¶","‡¶¨‡ßã‡¶ï‡¶æ‡¶ö‡ßã‡¶¶‡¶æ","‡¶π‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø","‡¶∂‡ßÅ‡ßü‡ßã‡¶∞‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ",
  "‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ","‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶ø","‡¶∞‡¶æ‡¶®‡ßç‡¶°‡¶ø","‡¶≠‡ßã‡¶¶‡¶æ‡¶∞","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ‡¶ö‡ßã‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶§‡¶ø‡¶∞‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ","‡¶ñ‡¶æ‡¶ô‡ßç‡¶ï‡¶ø","‡¶∏‡¶æ‡¶â‡¶Ø‡¶º‡¶æ",
  "‡¶Æ‡¶æ‡¶Ç","‡¶ñ‡¶æ‡¶®‡¶ï‡¶ø","‡¶≠‡ßã‡¶¶‡¶æ","‡¶ú‡¶∞‡¶ú","‡¶∏‡¶æ‡¶â‡¶Ø‡¶º‡¶æ‡¶∞","‡¶¨‡ßá‡¶¶‡¶∂‡¶ø","‡¶Æ‡¶æ‡¶¶‡¶∞‡¶ø","‡¶Æ‡¶æ‡¶Ç","‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶™‡ßã‡¶≤‡¶æ","‡¶π‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ú‡¶æ‡¶¶‡¶æ","‡¶∂‡ßÅ‡ßü‡ßã‡¶∞",
  "‡¶°‡ßÅ‡¶ï‡¶∞","‡¶ö‡¶¶‡¶Æ‡¶æ‡¶∞‡¶æ‡¶®‡ßÄ","‡¶ö‡¶¶‡¶™‡ßã‡¶ï‡¶æ","‡¶ö‡ßÅ‡¶¶‡¶™‡ßã‡¶ï‡¶æ","‡¶∂‡ßÅ‡ßü‡ßã‡¶∞‡ßá‡¶∞ ‡¶õ‡¶æ‡¶®‡¶æ","‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶õ‡¶æ‡¶®‡¶æ","‡¶ö‡ßÅ‡¶§‡¶ø‡¶∞‡¶™‡ßã‡¶≤‡¶æ","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ‡¶™‡ßÅ‡¶§",
  "‡¶¨‡ßã‡¶ï‡¶æ‡¶ö‡ßã‡¶¶","‡¶π‡ßá‡¶°‡¶æ","‡¶π‡ßã‡¶ó‡¶æ","‡¶≤‡¶Æ‡ßç‡¶™‡¶ü","‡¶ö‡ßã‡¶¶‡¶æ‡¶ö‡ßÅ‡¶¶‡¶ø","heda","‡¶ö‡ßÅ‡¶¶‡¶®‡¶ø",
  "fuck","fucking","motherfucker","mother fucker","mf","fucker","bitch","son of a bitch","slut","whore",
  "asshole","bastard","dick","chdi","retard","pussy","cunt","gay","lesbian","xodi","nigga","nigger",
  "cock","jerk","wanker","porn","sucker","bollocks","bloody hell","xoda","bullshit","voda","douche","douchebag",
  "moron","hada","scumbag","Head","prick","fag","faggot"
];

module.exports.config = {
  name: "antigali",
  version: "4.0.0",
  hasPermssion: 1,
  credits: "Rx Abdullah",
  description: "Admin ‡¶õ‡¶æ‡ßú‡¶æ ‡¶ï‡ßá‡¶â ‡¶¨‡¶ï‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá ‡ß© ‡¶¨‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá ‡¶ï‡¶ø‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá, warning ‡¶Ü‡¶ó‡ßá",
  commandCategory: "Group",
  usages: "!antigali on / !antigali off",
  cooldowns: 0,
};

module.exports.handleEvent = async function ({ api, event }) {
  try {
    if (!antiGaliStatus) return;
    const { threadID, senderID, body, messageID } = event;
    if (!body) return;

    const msg = body.toLowerCase();

    // Group info ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    let admins = [];
    try {
      const threadInfo = await api.getThreadInfo(threadID);
      admins = threadInfo.adminIDs.map(admin => admin.id);
    } catch (e) {
      console.log("‚ùå ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", e);
    }

    if (admins.includes(senderID)) return; // ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡¶≤‡ßá skip

    if (badWords.some(word => msg.includes(word))) {

      if (!offenseTracker[threadID]) offenseTracker[threadID] = {};
      if (!offenseTracker[threadID][senderID]) offenseTracker[threadID][senderID] = 0;

      offenseTracker[threadID][senderID] += 1;
      const count = offenseTracker[threadID][senderID];

      const userInfo = await api.getUserInfo(senderID);
      const userName = userInfo[senderID]?.name || "User";

      // Auto unsend offending message after 1 minute
      setTimeout(() => {
        api.unsendMessage(messageID).catch(err => console.error("Failed to unsend:", err));
      }, 60000);

      // 1st & 2nd offense -> warning (AUTOMOD ALERT)
      if (count < 3) {
        const warningMsg = 
`ùóîùó®ùóßùó¢ùó†ùó¢ùóó ùóîùóüùóòùó•ùóß üö´
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚ö†Ô∏è ùó™ùóîùó•ùó°ùóúùó°ùóö: Offensive Language Detected
‚ïë üë§ User: ${userName}
‚ïë üìÑ Message: Contains prohibited words
‚ïë üîÅ Offense Count: ${count}
‚ïë üßπ Action: Please delete/unsend immediately
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;

        return api.sendMessage(warningMsg, threadID);
      }

      // 3rd offense -> kick using autokick logic
      if (count === 3) {
        try {
          await api.sendMessage(
            `‚ùå @${senderID} ‡¶§‡ßÅ‡¶Æ‡¶ø ‡ß© ‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ú‡ßá ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§ ‡¶§‡¶æ‡¶á ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã! üö´`,
            threadID,
            () => api.removeUserFromGroup(senderID, threadID),
            { mentions: [{ tag: "User", id: senderID }] }
          );
          offenseTracker[threadID][senderID] = 0; // reset after kick
        } catch (kickErr) {
          return api.sendMessage(`‚ö†Ô∏è Failed to kick ${userName}. Check bot permissions.`, threadID);
        }
      }
    }

  } catch (error) {
    console.error(error);
  }
};

module.exports.run = async function ({ api, event, args }) {
  if (args[0] === "on") {
    antiGaliStatus = true;
    return api.sendMessage("‚úÖ Anti-Gali system is now **ON**", event.threadID);
  } else if (args[0] === "off") {
    antiGaliStatus = false;
    return api.sendMessage("‚ùå Anti-Gali system is now **OFF**", event.threadID);
  } else {
    return api.sendMessage("Usage: !antigali on / !antigali off", event.threadID);
  }
};
