// modules/events/antigali.js
let antiGaliStatus = false; // Default OFF
let offenseTracker = {}; 

const badWords = [
  "‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ","‡¶Æ‡¶æ‡¶ó‡ßÄ","‡¶Æ‡¶æ‡¶ó‡ßÄ‡¶ö‡ßã‡¶¶","‡¶ö‡ßã‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶¶","‡¶ö‡ßÅ‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶¶‡¶æ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶®",
  "‡¶ö‡ßÅ‡¶¶‡¶ø‡¶∞","‡¶ö‡ßÅ‡¶§","‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶ö‡ßÅ‡¶§‡¶Æ‡¶æ‡¶∞‡¶æ‡¶®‡¶ø","‡¶ö‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ","shawya","‡¶¨‡¶æ‡¶≤‡ßá‡¶∞","‡¶¨‡¶æ‡¶≤‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶¨‡¶æ‡¶≤‡¶õ‡¶æ‡¶≤",
  "‡¶¨‡¶æ‡¶≤‡¶õ‡¶æ‡¶≤ ‡¶ï‡¶•‡¶æ","‡¶Æ‡¶æ‡¶ó‡ßÄ‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶∞‡¶æ‡¶®‡ßç‡¶°‡¶ø","‡¶∞‡¶æ‡¶®‡ßç‡¶¶‡¶ø","‡¶∞‡¶æ‡¶®‡ßç‡¶¶‡¶ø‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ‡¶™‡¶®‡¶æ",
  "Khanki","mgi","‡¶§‡ßã‡¶ï‡ßá ‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶§‡ßÅ‡¶á ‡¶ö‡ßÅ‡¶¶","fuck","f***","f*ck","fu*k","fuk","fking","f***ing","fucking",
  "motherfucker","mf","mfer","motherfu**er","mthrfckr","bitch","b!tch","biatch","slut","whore","bastard",
  "asshole","a$$hole","a**hole","dick","d!ck","cock","prick","pussy","Mariak cudi","cunt","fag","faggot","retard",
  "magi","magir","magirchele","rand","randir","randirchele","chuda","chud","chudir","chut","chudi","chutmarani",
  "tor mayer","tor baper","toke chudi","chod"
];

module.exports = {
  antiGaliStatus, // ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá access ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  setStatus: (status) => { antiGaliStatus = status; },
  handleEvent: async function ({ api, event }) {
    try {
      if (!antiGaliStatus) return;
      const { threadID, senderID, body, messageID } = event;
      if (!body) return;

      const msg = body.toLowerCase();

      // Group info ‡¶•‡ßá‡¶ï‡ßá admin check
      let admins = [];
      try {
        const threadInfo = await api.getThreadInfo(threadID);
        admins = threadInfo.adminIDs.map(admin => admin.id);
      } catch (e) { console.log("‚ùå ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", e); }
      if (admins.includes(senderID)) return;

      if (badWords.some(word => msg.includes(word))) {
        if (!offenseTracker[threadID]) offenseTracker[threadID] = {};
        if (!offenseTracker[threadID][senderID]) offenseTracker[threadID][senderID] = 0;
        offenseTracker[threadID][senderID] += 1;
        const count = offenseTracker[threadID][senderID];

        const userInfo = await api.getUserInfo(senderID);
        const userName = userInfo[senderID]?.name || "User";

        // Auto unsend 1 minute
        setTimeout(() => {
          api.unsendMessage(messageID).catch(err => console.error("Failed to unsend:", err));
        }, 60000);

        // 1st & 2nd offense -> warning
        if (count < 3) {
          const warningMsg = 
`ùóîùó®ùóßùó¢ùó†ùó¢ùóó ùóîùóüùóòùó•ùóß üö´
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚ö†Ô∏è ùó™ùóîùó•ùó°ùóúùó°ùóö: Offensive Language Detected
‚ïë üë§ User: ${userName}
‚ïë üìÑ Message: Contains prohibited words
‚ïë üîÅ Offense Count: ${count}
‚ïë üßπ Action: Please delete/unsend immediately
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;
          return api.sendMessage(warningMsg, threadID);
        }

        // 3rd offense -> kick
        if (count === 3) {
          try {
            await api.sendMessage(
              `‚ùå @${senderID} ‡¶§‡ßÅ‡¶Æ‡¶ø ‡ß© ‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ú‡ßá ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§ ‡¶§‡¶æ‡¶á ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã! üö´`,
              threadID,
              () => api.removeUserFromGroup(senderID, threadID),
              { mentions: [{ tag: "User", id: senderID }] }
            );
            offenseTracker[threadID][senderID] = 0;
          } catch (kickErr) {
            return api.sendMessage(`‚ö†Ô∏è Failed to kick ${userName}. Check bot permissions.`, threadID);
          }
        }
      }
    } catch (err) { console.error(err); }
  }
};
