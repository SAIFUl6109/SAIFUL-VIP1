/* Official code by rX Abdullah
============= (Maria ├Ч rX Chatbot)========== */

const fs = require("fs");
const path = require("path");

// ржХрж╛рж╕рзНржЯржо JSON ржлрж╛ржЗрж▓ рж▓рзЛржХрзЗрж╢ржи
const protectFile = path.join(__dirname, "rx/protect.json");

module.exports.config = {
  name: "protect",
  eventType: ["log:thread-name", "log:thread-icon", "log:thread-image"],
  version: "2.3.2",
  credits: "rX Abdullah", // ржХрзНрж░рзЗржбрж┐ржЯ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛
  description: "ржЧрзНрж░рзБржк ржкрзНрж░рзЛржЯрзЗржХрж╢ржи рж╕рж┐рж╕рзНржЯрзЗржо (рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рзЗржн ржХрж░рж╛ ржЧрзНрж░рзБржк рж░рж┐рж╕рзНржЯрзЛрж░ ржХрж░ржмрзЗ)"
};

// JSON рж▓рзЛржб
function loadProtect() {
  if (!fs.existsSync(protectFile)) fs.writeFileSync(protectFile, JSON.stringify({}, null, 4));
  return JSON.parse(fs.readFileSync(protectFile));
}

// JSON рж╕рзЗржн
function saveProtect(data) {
  fs.writeFileSync(protectFile, JSON.stringify(data, null, 4));
}

// тЭМ Auto-save ржмржирзНржз
module.exports.run = async function({ api }) {
  console.log("ЁЯЫбя╕П Group protect auto-save ржмржирзНржзред рж╢рзБржзрзБ рж╕рзЗржн ржХрж░рж╛ ржЧрзНрж░рзБржк рж░рж┐рж╕рзНржЯрзЛрж░ рж╣ржмрзЗред");
};

// ржЗржнрзЗржирзНржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
module.exports.runEvent = async function({ event, api }) {
  try {
    let protect = loadProtect();
    const threadID = event.threadID;

    // ржпржжрж┐ ржЧрзНрж░рзБржк JSON ржП ржирж╛ ржерж╛ржХрзЗ тЖТ ignore
    if (!protect[threadID]) return;

    const info = protect[threadID];
    const threadInfo = await api.getThreadInfo(threadID);
    const isAdmin = threadInfo.adminIDs.some(adm => adm.id == event.author);

    if (isAdmin) {
      // тЬЕ Admin ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗ JSON ржЖржкржбрзЗржЯ
      if (event.logMessageType === "log:thread-name") {
        const oldName = info.name;
        info.name = threadInfo.threadName;
        saveProtect(protect);
        api.sendMessage(`тЬЕ Admin [${event.author}] ржЧрзНрж░рзБржк ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж▓рзЛ\nржкрзБрж░рж╛ржирзЛ: ${oldName}\nржирждрзБржи: ${info.name}`, threadID);
      }
      else if (event.logMessageType === "log:thread-icon") {
        info.emoji = threadInfo.emoji;
        saveProtect(protect);
      }
      else if (event.logMessageType === "log:thread-image") {
        info.imagePath = __dirname + "/cache/" + threadID + ".png";
        saveProtect(protect);
      }
      return;
    }

    // тЭМ Non-admin ржкрж░рж┐ржмрж░рзНрждржи тЖТ restore
    if (event.logMessageType === "log:thread-name") {
      await api.setTitle(info.name, threadID);
      api.sendMessage(`тЪая╕П Non-admin [${event.author}] ржЧрзНрж░рзБржк ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж▓рзЛ\nрж░рж┐рж╕рзНржЯрзЛрж░: ${info.name}`, threadID);
    }
    else if (event.logMessageType === "log:thread-icon") {
      api.changeThreadEmoji(info.emoji, threadID);
      api.sendMessage("тЪая╕П ржЗржорзЛржЬрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржЕржирзБржорзЛржжрж┐ржд ржиржпрж╝!\nЁЯй╖ ржПржЗ ржЧрзНрж░рзБржк ржкрзНрж░рзЛржЯрзЗржХрзНржЯрзЗржб", threadID);
    }
    else if (event.logMessageType === "log:thread-image") {
      const pathImg = info.imagePath;
      if (fs.existsSync(pathImg)) {
        api.changeGroupImage(fs.createReadStream(pathImg), threadID);
      }
      api.sendMessage("тЪая╕П ржЧрзНрж░рзБржк ржЫржмрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржЕржирзБржорзЛржжрж┐ржд ржиржпрж╝!\nЁЯй╖ ржПржЗ ржЧрзНрж░рзБржк rX Chatbot ржжрзНржмрж╛рж░рж╛ ржкрзНрж░рзЛржЯрзЗржХрзНржЯрзЗржб", threadID);
    }

  } catch (err) {
    console.error("[Maria Protect Error]", err);
  }
};
