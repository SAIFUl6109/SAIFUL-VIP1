// commands/protect.js
const fs = require("fs");
const path = require("path");

const protectFile = path.join(__dirname, "../../protect.json");

function loadProtect() {
  if (!fs.existsSync(protectFile)) fs.writeFileSync(protectFile, JSON.stringify({}, null, 4));
  return JSON.parse(fs.readFileSync(protectFile));
}
function saveProtect(data) {
  fs.writeFileSync(protectFile, JSON.stringify(data, null, 4));
}

module.exports.config = {
  name: "protect",
  version: "1.0.1",
  hasPermssion: 1,
  credits: "rX Abdullah",
  description: "Turn ON/OFF the protect system",
  usages: "[on/off]",
  commandCategory: "system"
};

module.exports.run = async function ({ api, event, args }) {
  const threadID = event.threadID;
  let protect = loadProtect();

  if (!protect[threadID]) {
    protect[threadID] = { enable: false };
  }

  // ‡¶ï‡ßã‡¶®‡ßã argument ‡¶®‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
  if (!args[0]) {
    const status = protect[threadID].enable ? "üü¢ ON" : "üî¥ OFF";
    return api.sendMessage(`‚öôÔ∏è Protect status: ${status}`, threadID);
  }

  const input = args[0].toLowerCase();
  if (input === "on") {
    protect[threadID].enable = true;
    saveProtect(protect);
    return api.sendMessage("‚úÖ Group protection system is now ON.", threadID);
  }

  if (input === "off") {
    protect[threadID].enable = false;
    saveProtect(protect);
    return api.sendMessage("‚ùå Group protection system is now OFF.", threadID);
  }

  return api.sendMessage("‚ùì Usage: !protect [on/off]", threadID);
};
