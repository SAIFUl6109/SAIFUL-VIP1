let antiGaliStatus = false; // Default OFF
let offenseTracker = {}; // Track per-group per-user offenses

const badWords = [
  "‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ","‡¶Æ‡¶æ‡¶ó‡ßÄ","‡¶Æ‡¶æ‡¶ó‡ßÄ‡¶ö‡ßã‡¶¶","‡¶ö‡ßã‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶¶","‡¶ö‡ßÅ‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶¶‡¶æ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶®",
  "‡¶ö‡ßÅ‡¶¶‡¶ø‡¶∞","‡¶ö‡ßÅ‡¶§","‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶ö‡ßÅ‡¶§‡¶Æ‡¶æ‡¶∞‡¶æ‡¶®‡¶ø","‡¶ö‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ","shawya","‡¶¨‡¶æ‡¶≤‡ßá‡¶∞","‡¶¨‡¶æ‡¶≤‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶¨‡¶æ‡¶≤‡¶õ‡¶æ‡¶≤",
  "‡¶¨‡¶æ‡¶≤‡¶õ‡¶æ‡¶≤ ‡¶ï‡¶•‡¶æ","‡¶Æ‡¶æ‡¶ó‡ßÄ‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶∞‡¶æ‡¶®‡ßç‡¶°‡¶ø","‡¶∞‡¶æ‡¶®‡ßç‡¶¶‡¶ø","‡¶∞‡¶æ‡¶®‡ßç‡¶¶‡¶ø‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ‡¶™‡¶®‡¶æ",
  "Khanki","mgi","‡¶§‡ßã‡¶ï‡ßá ‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶§‡ßÅ‡¶á ‡¶ö‡ßÅ‡¶¶","fuck","f***","f*ck","fu*k","fuk","fking","f***ing","fucking",
  "motherfucker","mf","mfer","motherfu**er","mthrfckr","bessi","mahirak xhudi","maria re cudi","maria re xhudi","mariak chudi","bastard",
  "asshole","a$$hole","a**hole","dick","shawya","cock","prick","pussy","Mariak cudi","cunt","fag","faggot","retard",
  "magi","magir","magirchele","abdullahk cudi","randir","randirchele","chuda","chud","chudir","chut","chudi","chutmarani",
  "tor mayer","tor baper","toke chudi","chod"
];

module.exports.config = {
  name: "antigali",
  version: "2.1.0",
  hasPermssion: 0,
  credits: "Rx Abdullah",
  description: "Auto offensive word detector with mention, ON/OFF, and progressive action",
  commandCategory: "moderation",
  usages: "!antigali on / !antigali off",
  cooldowns: 0
};

module.exports.handleEvent = async function ({ api, event }) {
  try {
    if (!antiGaliStatus) return; // OFF ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ
    if (!event.body) return;

    const message = event.body.toLowerCase();
    const threadID = event.threadID;
    const userID = event.senderID;

    // Initialize offense tracker
    if (!offenseTracker[threadID]) offenseTracker[threadID] = {};
    if (!offenseTracker[threadID][userID]) offenseTracker[threadID][userID] = 0;

    if (badWords.some(word => message.includes(word))) {
      offenseTracker[threadID][userID] += 1;
      const count = offenseTracker[threadID][userID];

      const userInfo = await api.getUserInfo(userID);
      const userName = userInfo[userID]?.name || "User";

      const mentionTag = { id: userID, tag: userName };

      const warningMsg = 
`ùóîùó®ùóßùó¢ùó†ùó¢ùóó ùóîùóüùóòùó•ùóß üö´
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚ö†Ô∏è ùó™ùóîùó•ùó°ùóúùó°ùóö: Offensive Language Detected
‚ïë üë§ User: @${mentionTag.tag}
‚ïë üìÑ Message: Contains prohibited words
‚ïë üßπ Action: Please delete/unsend immediately
‚ïë üîÅ Offense Count: ${count}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
‚ö†Ô∏è Reminder: Please speak respectfully.`;

      await api.sendMessage({ body: warningMsg, mentions: [mentionTag] }, threadID, event.messageID);

      // Handle progressive action
      if (count >= 3) {
        try {
          const botInfo = await api.getCurrentUserID();
          const threadInfo = await api.getThreadInfo(threadID);
          const botIsAdmin = threadInfo.adminIDs.some(adm => adm.id == botInfo);

          if (botIsAdmin) {
            // Kick user
            await api.removeUserFromGroup(userID, threadID);
            offenseTracker[threadID][userID] = 0; // Reset offense count after kick
            return api.sendMessage(`üö® User @${mentionTag.tag} has been removed due to repeated offenses.`, threadID, null, { mentions: [mentionTag] });
          } else {
            // Bot not admin -> leave group on 4th offense
            if (count >= 4) {
              await api.sendMessage("‚ö†Ô∏è I cannot moderate properly. Leaving the group.", threadID);
              return api.leaveThread(threadID);
            }
          }
        } catch (err) {
          console.error("Error handling kick/leave:", err);
        }
      }
    }

  } catch (error) {
    console.error(error);
  }
};

module.exports.run = async function ({ api, event, args }) {
  if (args[0] === "on") {
    antiGaliStatus = true;
    return api.sendMessage("‚úÖ Anti-Gali system is now **ON**", event.threadID);
  } else if (args[0] === "off") {
    antiGaliStatus = false;
    return api.sendMessage("‚ùå Anti-Gali system is now **OFF**", event.threadID);
  } else {
    return api.sendMessage("Usage: !antigali on / !antigali off", event.threadID);
  }
};
