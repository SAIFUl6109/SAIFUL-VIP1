let antiGaliStatus = false; // Default OFF
let offenseTracker = {}; // Track per-group per-user offenses

const badWords = [
  "‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ","‡¶Æ‡¶æ‡¶ó‡ßÄ","‡¶Æ‡¶æ‡¶ó‡ßÄ‡¶ö‡ßã‡¶¶","‡¶ö‡ßã‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶¶","‡¶ö‡ßÅ‡¶¶‡¶æ","‡¶ö‡ßÅ‡¶¶‡¶æ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶®",
  "‡¶ö‡ßÅ‡¶¶‡¶ø‡¶∞","‡¶ö‡ßÅ‡¶§","‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶ö‡ßÅ‡¶§‡¶Æ‡¶æ‡¶∞‡¶æ‡¶®‡¶ø","‡¶ö‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ","shawya","‡¶¨‡¶æ‡¶≤‡ßá‡¶∞","‡¶¨‡¶æ‡¶≤‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶¨‡¶æ‡¶≤‡¶õ‡¶æ‡¶≤",
  "‡¶¨‡¶æ‡¶≤‡¶õ‡¶æ‡¶≤ ‡¶ï‡¶•‡¶æ","‡¶Æ‡¶æ‡¶ó‡ßÄ‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶∞‡¶æ‡¶®‡ßç‡¶°‡¶ø","‡¶∞‡¶æ‡¶®‡ßç‡¶¶‡¶ø","‡¶∞‡¶æ‡¶®‡ßç‡¶¶‡¶ø‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ","‡¶¨‡ßá‡¶∂‡ßç‡¶Ø‡¶æ‡¶™‡¶®‡¶æ",
  "Khanki","mgi","‡¶§‡ßã‡¶ï‡ßá ‡¶ö‡ßÅ‡¶¶‡¶ø","‡¶§‡ßÅ‡¶á ‡¶ö‡ßÅ‡¶¶","fuck","f***","f*ck","fu*k","fuk","fking","f***ing","fucking",
  "motherfucker","mf","mfer","motherfu**er","mthrfckr","bitch","b!tch","biatch","slut","whore","bastard",
  "asshole","a$$hole","a**hole","dick","d!ck","cock","prick","pussy","Mariak cudi","cunt","fag","faggot","retard",
  "magi","magir","magirchele","rand","randir","randirchele","chuda","chud","chudir","chut","chudi","chutmarani",
  "tor mayer","tor baper","toke chudi","chod"
];

module.exports.config = {
  name: "antigali",
  version: "2.7.0",
  hasPermssion: 0,
  credits: "Rx Abdullah",
  description: "Auto kick on 3rd offense, leave on 4th, auto unsend (no mention required)",
  commandCategory: "moderation",
  usages: "!antigali on / !antigali off",
  cooldowns: 0
};

module.exports.handleEvent = async function ({ api, event }) {
  try {
    if (!antiGaliStatus) return;
    if (!event.body) return;

    const message = event.body.toLowerCase();
    const threadID = event.threadID;
    const userID = event.senderID;

    if (!offenseTracker[threadID]) offenseTracker[threadID] = {};
    if (!offenseTracker[threadID][userID]) offenseTracker[threadID][userID] = 0;

    if (badWords.some(word => message.includes(word))) {
      offenseTracker[threadID][userID] += 1;
      const count = offenseTracker[threadID][userID];

      const userInfo = await api.getUserInfo(userID);
      const userName = userInfo[userID]?.name || "User";

      const warningMsg = 
`ùóîùó®ùóßùó¢ùó†ùó¢ùóó ùóîùóüùóòùó•ùóß üö´
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚ö†Ô∏è ùó™ùóîùó•ùó°ùóúùó°ùóö: Offensive Language Detected
‚ïë üë§ User: ${userName}
‚ïë üìÑ Message: Contains prohibited words
‚ïë üîÅ Offense Count: ${count}
‚ïë üßπ Action: Please delete/unsend immediately
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;

      // Send warning
      await api.sendMessage(warningMsg, threadID, event.messageID);

      // Auto unsend offending message after 1 minute
      setTimeout(() => {
        api.unsendMessage(event.messageID).catch(err => console.error("Failed to unsend:", err));
      }, 60000);

      // 3rd offense -> direct kick
      if (count === 3) {
        try {
          await api.removeUserFromGroup(userID, threadID);
          offenseTracker[threadID][userID] = 0; // reset count after kick
          return api.sendMessage(`üö® User ${userName} has been removed due to repeated offenses.`, threadID);
        } catch (kickErr) {
          return api.sendMessage(`‚ö†Ô∏è Failed to kick ${userName}. Please check bot permissions.`, threadID);
        }
      }

      // 4th offense -> bot leave
      if (count === 4) {
        try {
          await api.sendMessage("‚ö†Ô∏è I am leaving the group due to repeated offenses and lack of permissions.", threadID);
          offenseTracker[threadID][userID] = 0; // reset count before leave
          return api.leaveThread(threadID);
        } catch (leaveErr) {
          return api.sendMessage("‚ö†Ô∏è Failed to leave the group. Please check bot permissions.", threadID);
        }
      }
    }
  } catch (error) {
    console.error(error);
  }
};

module.exports.run = async function ({ api, event, args }) {
  if (args[0] === "on") {
    antiGaliStatus = true;
    return api.sendMessage("‚úÖ Anti-Gali system is now **ON**", event.threadID);
  } else if (args[0] === "off") {
    antiGaliStatus = false;
    return api.sendMessage("‚ùå Anti-Gali system is now **OFF**", event.threadID);
  } else {
    return api.sendMessage("Usage: !antigali on / !antigali off", event.threadID);
  }
};
